from asyncio import sleep
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from datetime import timedelta, datetime
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup

import app.keyboards.keyboard as kb
from app.utils.link import generate_unique_link
import app.database.requests as rq
from app.utils.payments import create_payment, check_payment_status

class SetPriceState(StatesGroup):
    waiting_for_price = State()

class QuestionLinkState(StatesGroup):
    selecting_questions = State()

class AddQuestions(StatesGroup):
    add_questions = State()

class AnsweringQuestions(StatesGroup):
    answering = State()


router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–æ–≤
PERIOD_TRANSLATION = {
    "day": "–¥–µ–Ω—å",
    "week": "–Ω–µ–¥–µ–ª—é",
    "month": "–º–µ—Å—è—Ü",
    "vip_month": "–º–µ—Å—è—Ü (VIP)",
    "vip": "–º–µ—Å—è—Ü (VIP)"
}

@router.callback_query(F.data == "generate_custom_link")
async def start_question_selection(callback: CallbackQuery, state: FSMContext):
    await state.set_state(QuestionLinkState.selecting_questions)
    await state.update_data(selected_questions=[])
    questions = await rq.get_all_questions()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
                                     reply_markup=kb.generate_question_selection_keyboard(questions))

@router.callback_query(F.data.startswith("select_q_"))
async def select_question(callback: CallbackQuery, state: FSMContext):
    question_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected = set(data.get("selected_questions", []))
    selected.add(question_id)
    await state.update_data(selected_questions=list(selected))
    await callback.answer("–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω")

@router.callback_query(F.data == "finalize_question_link")
async def finalize_link(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    question_ids = data.get("selected_questions", [])
    if not question_ids:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å", show_alert=True)
        return

    token = await rq.create_question_link(callback.from_user.id, question_ids)
    await callback.message.edit_text(f"–°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞:\n{token}",
                                     reply_markup=kb.generate_back_button())
    await state.clear()

@router.callback_query(F.data.startswith("rateq_"))
async def handle_question_rating(callback: CallbackQuery):
    _, qid, score, token = callback.data.split("_", 3)
    qid, score = int(qid), int(score)
    await rq.save_question_rating(token, qid, callback.from_user.id, score)
    await callback.answer("–û—Ü–µ–Ω–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞")

@router.callback_query(F.data.startswith("rate_step_"))
async def handle_step_rating(callback: CallbackQuery, state: FSMContext):
    try:
        # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ callback_data
        payload = callback.data[len("rate_step_"):]  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
        qid_str, score_str, token = payload.split("_", 2)
        qid, score = int(qid_str), int(score_str)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        await rq.save_question_rating(token, qid, callback.from_user.id, score)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ FSM
        data = await state.get_data()
        if "questions" not in data or "index" not in data:
            await callback.message.edit_text("‚õî –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=kb.generate_back_button())
            await state.clear()
            return

        questions = data["questions"]
        index = data["index"] + 1

        if index < len(questions):
            next_q = questions[index]
            await state.update_data(index=index)
            await callback.message.edit_text(
                f"‚ùì {next_q['text']}",
                reply_markup=kb.generate_single_question_keyboard(token, next_q['id'])
            )
        else:
            await state.clear()
            await callback.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ, –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!", reply_markup=kb.generate_back_button())

    except Exception as e:
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kb.generate_back_button())
        raise e

@router.callback_query(F.data == "poll_results")
async def show_poll_results(callback: CallbackQuery):
    user_id = callback.from_user.id

    is_vip = await rq.check_vip_status(user_id)
    results = await rq.get_poll_results(user_id, detailed=is_vip)

    if not results:
        await callback.message.edit_text("‚õîÔ∏è –ó–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª.", reply_markup=kb.generate_back_results())
        return

    if is_vip:
        # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (—Ç–µ–ø–µ—Ä—å —Å —Å—Ä–µ–¥–Ω–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏)
        text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–æ–≤ (VIP):\n\n"
        for rater in results:
            text += f"@{rater['username'] or '–∞–Ω–æ–Ω–∏–º'}:\n"
            for q in rater['questions']:
                text += f"‚Ä¢ {q['text']} ‚Äî {q['avg_score']:.1f}\n"
            text += "‚Äì‚Äì‚Äì\n"
    else:
        # –¢–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
        text = "üìä –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:\n\n"
        for row in results:
            text += f"{row['text']}: {row['avg']:.2f}\n"

    await callback.message.edit_text(text, reply_markup=kb.generate_back_results())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await rq.set_user(message.from_user.id, message.from_user.first_name, message.from_user.username)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = await rq.is_admin(message.from_user.id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    if message.text and " " in message.text:
        args = message.text.split(" ", 1)[1]

        if args.startswith("rate_"):
            token = args.split("rate_")[1]

            # 1. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞)
            user = await rq.get_user_by_token(token)
            if user:
                await message.answer(
                    f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user['first_name']}.\n–û—Ü–µ–Ω–∏—Ç–µ –µ–≥–æ –æ—Ç 1 –¥–æ 5.",
                    reply_markup=kb.generate_rate_keyboard(token)
                )
                return

            # 2. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã (–æ–ø—Ä–æ—Å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º)
            questions = await rq.get_questions_by_token(token)
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞
            author_id = await rq.get_token_owner(token)
            if author_id == message.from_user.id:
                await message.answer("‚õîÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.", reply_markup=kb.generate_back_button())
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª?
            already_rated = await rq.has_rated_token(token, message.from_user.id)
            if already_rated:
                await message.answer("‚úÖ –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å.", reply_markup=kb.generate_back_button())
                return
            
            if questions:
                await state.set_state(AnsweringQuestions.answering)
                await state.update_data(token=token, questions=questions, index=0)
                
                current_question = questions[0]
                await message.answer(
                    f"‚ùì {current_question['text']}",
                    reply_markup=kb.generate_single_question_keyboard(token, current_question['id'])
                )
                return

            # –ï—Å–ª–∏ –Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=kb.generate_back_button())
            return

        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", reply_markup=kb.generate_back_button())
            return

    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –æ—Ü–µ–Ω–∫–∏ –æ –≤–∞—Å. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=kb.generate_main_menu(is_admin)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@router.callback_query(F.data == 'back_to_menu')
async def show_menu(callback: CallbackQuery):
    is_admin = await rq.is_admin(callback.from_user.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.answer('')
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.generate_main_menu(is_admin))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "generate_link")
async def generate_link(callback: CallbackQuery):
    user_id = callback.from_user.id
    link = await generate_unique_link(user_id)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –∏ —Ç–æ–∫–µ–Ω
    await callback.answer('')
    await callback.message.edit_text(
        f"–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤!",
        reply_markup=kb.generate_back_button()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
@router.callback_query(F.data.startswith('rate_'))
async def handle_rating(callback: CallbackQuery):
    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –ø–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º
    data_parts = callback.data.split('_')
    score = int(data_parts[1])  # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ 2-–π —á–∞—Å—Ç–∏)
    token = callback.data.split('=')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ '='
    is_admin = await rq.is_admin(callback.from_user.id)

    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è
    rated_user = await rq.get_user_by_token(token)
    if not rated_user:
        await callback.message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                      reply_markup=kb.generate_main_menu(is_admin))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —Å–∞–º —Å–µ–±—è
    if rated_user['tg_id'] == user_id:
        await callback.message.edit_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è!",
                                         reply_markup=kb.generate_main_menu(is_admin))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    existing_rating = await rq.get_existing_rating(user_id, rated_user['tg_id']) #tg_id
    if existing_rating:
        await callback.message.edit_text("–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
                                         reply_markup=kb.generate_main_menu(is_admin))
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    await rq.save_rating(rater_user_id=user_id, rated_user_id=rated_user['tg_id'], score=score) #tg_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞
    await callback.answer('')
    await callback.message.edit_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –í—ã –æ—Ü–µ–Ω–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {rated_user['first_name']} –Ω–∞ {score} –±–∞–ª–ª–æ–≤.", #first_name
        reply_markup=kb.generate_main_menu(is_admin)
    )

@router.callback_query(F.data == "check_subscription")
async def check_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id

    if await rq.has_active_access(user_id):
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏
        time_left = await rq.get_subscription_time_left(user_id)

        if time_left:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            await callback.answer('')
            await callback.message.edit_text(
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {time_left['days']} –¥–Ω–µ–π, {time_left['hours']} —á–∞—Å–æ–≤, {time_left['minutes']} –º–∏–Ω—É—Ç.",
                reply_markup=kb.generate_back_button()
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å
        await callback.answer('')
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?",
            reply_markup=kb.generate_payment_period_keyboard()
        )
    

@router.callback_query(F.data == "show_results")
async def show_results(callback: CallbackQuery):
    user_id = callback.from_user.id

    is_vip = await rq.check_vip_status(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    if await rq.is_payment_successful(user_id):
        await callback.answer('')
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=kb.generate_stats_menu(is_vip)
        )
    else:
        await callback.answer('')
        await callback.message.edit_text(
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã:",
            reply_markup=kb.generate_payment_period_keyboard()
        )

@router.callback_query(F.data == "view_voters")
async def view_voters(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VIP-–ø–æ–¥–ø–∏—Å–∫–∞
    is_vip = await rq.check_vip_status(user_id)
    if not is_vip:
        await callback.answer('')
        await callback.message.edit_text(
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ VIP-–ø–æ–¥–ø–∏—Å–∫–∞.",
            reply_markup=kb.generate_payment_period_keyboard() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º VIP
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö
    voters = await rq.get_voters(user_id)
    if not voters:
        await callback.answer('')
        await callback.message.edit_text(
            "–ó–∞ –≤–∞—Å –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª.",
            reply_markup=kb.generate_back_button()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö
    voters_list = []
    for voter in voters:
        username = voter.get('username', '–±–µ–∑ username')  # –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        voters_list.append(f"@{username}: {voter['score']} –±–∞–ª–ª–æ–≤")

    voters_message = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ü–µ–Ω–∏–ª–∏ –≤–∞—Å:\n" + "\n".join(voters_list)
    await callback.answer('')
    await callback.message.edit_text(
        voters_message,
        reply_markup=kb.generate_back_results()
    )

@router.callback_query(F.data.startswith('pay_'))
async def handle_payment(callback: CallbackQuery):
    user_id = callback.from_user.id
    period = callback.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ VIP-—Ç–∞—Ä–∏—Ñ–æ–º
    is_vip = "vip" in callback.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    existing_payment = await rq.get_active_payment(user_id)

    if existing_payment:
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –µ—Å—Ç—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        await callback.answer('')
        await callback.message.edit_text(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥?",
            reply_markup=kb.generate_confirm_new_payment_keyboard(period, is_vip)
        )
        return

    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    await create_new_payment(user_id, period, callback, is_vip)

async def create_new_payment(user_id, period, callback, is_vip=False):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."""
    period_name = PERIOD_TRANSLATION.get(period, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    if period == 'vip':
        price = await rq.get_subscription_price(period, is_vip)
    else:
        price = await rq.get_subscription_price(period_name, is_vip)

    if price is None:
        await callback.answer('')
        await callback.message.edit_text(
            "–¶–µ–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=kb.generate_back_button()
        )
        return

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º–µ—Ç–∫—É
    payment_url, unique_label = await create_payment(price, f"–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–∞ {period_name}")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–∞
    now = datetime.now()
    if period == "day":
        access_end = now + timedelta(days=1)
    elif period == "week":
        access_end = now + timedelta(weeks=1)
    elif period == "month" or period == "vip_month":  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º vip_month
        access_end = now + timedelta(days=30)
    else:
        # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        access_end = now + timedelta(days=1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –º–µ—Ç–∫–æ–π –∏ –ø–µ—Ä–∏–æ–¥–æ–º
    await rq.save_payment(user_id, price, unique_label, payment_url, now, access_end, period, is_vip)

    await callback.answer('')
    await callback.message.edit_text(
        f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–∞ {period_name} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å {price} —Ä—É–±. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb.generate_payment_keyboard(payment_url, '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É')
    )

@router.callback_query(F.data.startswith('confirm_new_payment_'))
async def confirm_new_payment(callback: CallbackQuery):
    user_id = callback.from_user.id
    data_parts = callback.data.split('_')
    period = data_parts[3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback_data
    is_vip = data_parts[4] == "vip"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ VIP-—Ç–∞—Ä–∏—Ñ–æ–º

    # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    await rq.delete_active_payment(user_id)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    await create_new_payment(user_id, period, callback, is_vip)

@router.callback_query(F.data == "buy_vip")
async def buy_vip(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    existing_payment = await rq.get_active_payment(user_id)

    if existing_payment:
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –µ—Å—Ç—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        await callback.answer('')
        await callback.message.edit_text(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–ª—è VIP-–ø–æ–¥–ø–∏—Å–∫–∏?",
            reply_markup=kb.generate_confirm_new_payment_keyboard(period="vip_month")
        )
        return

    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π VIP-–ø–ª–∞—Ç–µ–∂
    await create_new_payment(user_id, "vip_month", callback, is_vip=True)

@router.callback_query(F.data == "check_payment")
async def check_payment(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_payment = await rq.get_last_payment(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    if not last_payment:
        await callback.answer('')
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.",
            reply_markup=kb.generate_main_menu()
        )
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    transaction_id = last_payment['transaction_id']
    payment_status = last_payment['status']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–ª–∞—Ç–µ–∂–∞
    if await rq.is_payment_expired(transaction_id):
        await callback.answer('')
        await callback.message.edit_text(
            "–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
            reply_markup=kb.generate_payment_period_keyboard()
        )
        return

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ "success", —Å—Ä–∞–∑—É –¥–∞–µ–º –¥–æ—Å—Ç—É–ø
    if payment_status == 'success':
        await callback.answer('')
        await callback.message.edit_text(
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=kb.generate_stats_menu()
        )
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –ÆMoney
        if await check_payment_status(transaction_id):
            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await callback.answer('')
            await callback.message.edit_text(
                "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                reply_markup=kb.generate_stats_menu()
            )
            return

        # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç
        countdown_time = 10
        for i in range(countdown_time, 0, -1):
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –æ—Ç—Å—á–µ—Ç–æ–º
            await callback.message.edit_reply_markup(
                reply_markup=kb.generate_payment_keyboard(last_payment['payment_url'], f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ {i}...")
            )
            await sleep(1)

        # –ü–æ—Å–ª–µ –æ—Ç—Å—á–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—â–µ —Ä–∞–∑
        if await check_payment_status(transaction_id):
            await callback.message.edit_text(
                "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                reply_markup=kb.generate_stats_menu()
            )
        else:
            await callback.message.edit_text(
                "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                reply_markup=kb.generate_payment_keyboard(last_payment['payment_url'], '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É')
            )
    except Exception as e:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb.generate_main_menu()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
@router.callback_query(F.data == "back_to_stat_choice")
async def back_to_stat_choice(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=kb.generate_stats_menu() # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    )

@router.callback_query(F.data.startswith('stat_'))
async def handle_statistics(callback: CallbackQuery):
    user_id = callback.from_user.id
    period = callback.data.split('_')[1]

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–µ—Ä–∏–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    period_name = PERIOD_TRANSLATION.get(period, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    if await rq.is_payment_successful(user_id):
        avg_score, total_ratings = await rq.get_statistics(user_id, period)
        if total_ratings:
            await callback.answer('')
            await callback.message.edit_text(
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}:\n–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.2f}\n–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {total_ratings}",
                reply_markup=kb.generate_back_results()
            )
        else:
            await callback.answer('')
            await callback.message.edit_text(f"–ó–∞ {period_name} —É –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫.", reply_markup=kb.generate_back_results())
    else:
        await callback.answer('')
        await callback.message.edit_text(
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å.",
            reply_markup=kb.generate_payment_period_keyboard()
        )

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await rq.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = await rq.get_total_users()
    users_with_links = await rq.get_users_with_links()
    payment_stats = await rq.get_payment_stats()
    total_spent = await rq.get_total_spent_on_subscriptions()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ —Å—Å—ã–ª–∫—É: {users_with_links}\n"
        f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {payment_stats['normal_payments']}\n"
        f"üåü –û–ø–ª–∞—á–µ–Ω–æ VIP-–ø–æ–¥–ø–∏—Å–æ–∫: {payment_stats['vip_payments']}\n"
        f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {total_spent['total_normal']:.2f} ‚ÇΩ\n"
        f"üíé –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ VIP-–ø–æ–¥–ø–∏—Å–∫–∏: {total_spent['total_vip']:.2f} ‚ÇΩ\n"
        f"üíµ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent['total']:.2f} ‚ÇΩ"
    )

    await callback.answer('')
    await callback.message.edit_text(stats_message, reply_markup=kb.generate_back_button())

@router.callback_query(F.data == "manage_prices")
async def manage_prices(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = callback.from_user.id

    period = callback.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ VIP-—Ç–∞—Ä–∏—Ñ–æ–º
    is_vip = "vip" in callback.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await rq.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    prices = await rq.get_subscription_price(period, is_vip)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
    prices_message = "–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
    if prices != None: 
        for price in prices:
            prices_message += f"{price['period']} ({'VIP' if price['is_vip'] else '–û–±—ã—á–Ω—ã–π'}): {price['price']} —Ä—É–±.\n"
    else:
        prices_message += "–°–µ–π—á–∞—Å —Ü–µ–Ω –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏
    await callback.answer('')
    await callback.message.edit_text(
        prices_message,
        reply_markup=kb.generate_manage_prices_keyboard()
    )

@router.callback_query(F.data.startswith("set_price_"))
async def handle_set_price(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã."""
    user_id = callback.from_user.id

    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ —á–∞—Å—Ç–∏
    parts = callback.data.split('_')  # –ü—Ä–∏–º–µ—Ä: "set_price_day_normal" -> ["set", "price", "day", "normal"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ parts —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if len(parts) < 4:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º period –∏ type
    period = parts[2]  # day, week, month
    subscription_type = parts[3]  # normal –∏–ª–∏ vip

    period_name = PERIOD_TRANSLATION.get(period, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ VIP
    is_vip = subscription_type == "vip"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await rq.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º period –∏ is_vip –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(period=period, is_vip=is_vip)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—É—é —Ü–µ–Ω—É
    await callback.answer('')
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period_name} ({'VIP' if is_vip else '–û–±—ã—á–Ω—ã–π'})"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
    await state.set_state(SetPriceState.waiting_for_price)

@router.message(SetPriceState.waiting_for_price)
async def handle_price_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await rq.is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    period = data.get("period")
    is_vip = data.get("is_vip")

    period_name = PERIOD_TRANSLATION.get(period, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    try:
        price = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    if is_vip:
        success = await rq.update_subscription_price("vip", price, is_vip)
    else:
        success = await rq.update_subscription_price(period_name, price, is_vip)

    if success:
        await message.answer(f"–¶–µ–Ω–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {period_name} ({'VIP' if is_vip else '–û–±—ã—á–Ω—ã–π'}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data.startswith("add_questions"))
async def add_questions(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not await rq.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=kb.generate_back_button())
        return
    
    await callback.answer('')
    await state.set_state(AddQuestions.add_questions)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:", reply_markup=kb.generate_back_button())

@router.message(AddQuestions.add_questions)
async def handle_question_input(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if not await rq.is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=kb.generate_back_button())
        await state.clear()
        return
    
    question = message.text.strip()
    if not question:
        await message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=kb.generate_back_button())
        return

    try:
        if await rq.question_exists(question):
            await message.answer("–¢–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=kb.generate_back_button())
            return

        success = await rq.update_questions_list(question)
        if success:
            await message.answer(f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: {question}", reply_markup=kb.generate_back_button())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.", reply_markup=kb.generate_back_button())
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", reply_markup=kb.generate_back_button())
    finally:
        await state.clear()